// Очередь.cpp: определяет точку входа для консольного приложения.
//

#include "stdafx.h"
#include <iostream>
#include <locale.h>
#include <conio.h>
#include <time.h>

using namespace std;
int n;                                          //размерность очереди

struct Queue
{
  int *arr;
	int first;
	int last;
	int count;
};

void Initial (int N, Queue *&p)                 //Инициализация стека
{
	p = new Queue[N];
	p->arr = new int[N];
	p->first = 0;
	p->last = 0;
	p->count = 0;
}

bool Full (Queue *&p)                            //Проверка на заполненность очереди
{
	if (p->count == n)
		return true;
	else
		return false;
}

bool Empty (Queue *&p)                            //Проверка, пуста ли очередь или нет
{
	if (p->count == 0)
		return true;
	else
		return false;
}

void add (int a, Queue *&p)                      //Добавление в очередь
{
	if (Full(p) == false)
	{
		p->arr[p->last] = a;
		p->last ++;
		if (p->last == n)
		p->last = 0;
		p->count ++;
	}
	else
		cout <<"Ошибка! Очередь заполнена!" << endl;
}

void del (Queue *&p)                             //Удаление из очереди
{
	if (Empty(p) == false)
	{
		p->arr[p->first] = 0;
		p->first ++;
		if (p->first == n)
		p->first = 0;
		p->count --;
	}
	else
		cout <<"Ошибка! Очередь пуста!" << endl;
}

void Show(Queue *p)                                       //Вывод очереди
{
	int i,temp; 
	for (i = p->first, temp=0; temp < p->count ; temp ++, i++) 
	{ 
		if (i == n) 
			i = 0; 
		cout << p->arr[i] << " "; 
	}
}

void main()
{
	setlocale(LC_ALL, "rus");
	Queue *p;
	cout <<"Введите размерность очереди: ";
	cin >> n;
	Initial(n, p);                                         //Инициализация очереди
	for (int i = 0; i < n; i++)                            //Заполнение очереди
		add(rand() % 10, p);
	Show (p);                                              //Выводим очередь
	cout << endl;
	cout <<"После удаления:" <<endl;
	del (p);                                               //Удаление из очереди
	Show (p);                                              //Выводим очередь
	_getch();
}


